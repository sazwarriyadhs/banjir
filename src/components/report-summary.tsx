"use client";

import { useState, useTransition } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Wand2, Loader2 } from "lucide-react";
import type { UserFloodReport } from "@/lib/types";
import { getSummary } from "@/app/actions";
import { useToast } from "@/hooks/use-toast";

interface ReportSummaryProps {
  reports: UserFloodReport[];
}

export default function ReportSummary({ reports }: ReportSummaryProps) {
  const [summary, setSummary] = useState<string>("");
  const [isPending, startTransition] = useTransition();
  const { toast } = useToast();

  const handleGenerateSummary = () => {
    startTransition(async () => {
      const result = await getSummary(reports);
      if (result.startsWith("Failed")) {
        toast({
          variant: "destructive",
          title: "Error",
          description: result,
        });
        setSummary("");
      } else {
        setSummary(result);
        toast({
          title: "Success",
          description: "Summary generated successfully.",
        });
      }
    });
  };

  return (
    <section>
      <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-2 mb-4">
        <h2 className="text-2xl font-bold tracking-tight">AI Report Summary</h2>
        <Button onClick={handleGenerateSummary} disabled={isPending}>
          {isPending ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Wand2 className="mr-2 h-4 w-4" />
          )}
          Generate Summary
        </Button>
      </div>
      <Card className="bg-primary/5 border-primary/20">
        <CardHeader>
          <CardTitle>Summary of Recent Reports</CardTitle>
          <CardDescription>
            {summary ? "Generated by AI" : "Click the button to generate a summary of all user reports."}
          </CardDescription>
        </CardHeader>
        <CardContent className="min-h-[100px] flex items-center justify-center">
          {isPending ? (
            <div className="flex flex-col items-center gap-2 text-muted-foreground">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p>Analyzing reports...</p>
            </div>
          ) : (
            <p className="text-sm sm:text-base text-foreground/90 whitespace-pre-wrap">
              {summary || "No summary generated yet."}
            </p>
          )}
        </CardContent>
      </Card>
    </section>
  );
}
